[project]
name = "isaac_lab_env"
version = "0.2.0"
authors = [{ name = "Austin Gregg-Smith", email = "blooop@gmail.com" }]
description = "A python package template"
readme = "README.md"
license = "MIT"

requires-python = ">=3.10,<3.11"

dependencies = ["isaacsim==4.2.0.2",
              "isaacsim-extscache-kit==4.2.0.2",
              "isaacsim-extscache-kit-sdk==4.2.0.2",
              "isaacsim-extscache-physics==4.2.0.2"
              ]

[project.urls]
Source = "https://github.com/blooop/isaac_lab_env"
Home = "https://github.com/blooop/isaac_lab_env"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.system-requirements]
libc = { family="glibc", version="2.35" }

[tool.pixi.dependencies]
python = "3.10.*"
pip = "==24.2"


[tool.pixi.pypi-dependencies]
isaac_lab_env = { path = ".", editable = true }


[project.optional-dependencies]
test = [
  "pylint>=3.2.5,<=3.3.3",
  "pytest-cov>=4.1,<=6.0.0",
  "pytest>=7.4,<=8.3.4",
  "hypothesis>=6.104.2,<=6.123.2",
  "ruff>=0.5.0,<=0.8.4",
  "coverage>=7.5.4,<=7.6.10",
  "pre-commit<=4.0.1"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include= ["isaac_lab_env"]

# Environments
[tool.pixi.environments]
default = {features = ["test"], solve-group = "default" }

[tool.pixi.tasks]
#Project Tasks
isaacsim = "isaacsim omni.isaac.sim.python.kit"

#CI Tasks
pre-commit = "pre-commit run -a"
pre-commit-update = "pre-commit autoupdate"
format = "ruff format ."
check-clean-workspace = "git diff --exit-code"
ruff-lint = "ruff check . --fix"
pylint = "pylint --version && echo 'running pylint...' && pylint $(git ls-files '*.py')"
lint = { depends_on = ["ruff-lint", "pylint"] }
style = { depends_on = ["format","lint"]}
commit-format = "git commit -a -m'autoformat code' || true"
test = "pytest"
coverage = "coverage run -m pytest && coverage xml -o coverage.xml"
coverage-report = "coverage report -m"
update-lock = "pixi update && git commit -a -m'update pixi.lock' || true"
push = "git push"
update-lock-push = { depends_on = ["update-lock", "push"] }
fix = { depends_on = ["update-lock", "format", "ruff-lint"] }
fix-commit-push = { depends_on = ["fix", "commit-format", "update-lock-push"] }
ci-no-cover = { depends_on = ["style", "test"] }
ci = { depends_on = ["format","ruff-lint", "pylint", "coverage", "coverage-report"] }
ci-push = {depends_on=["format","ruff-lint","update-lock","ci","push"]}
clear-pixi = "rm -rf .pixi pixi.lock"
setup-git-merge-driver = "git config merge.ourslock.driver true"
update-from-template-repo = "./scripts/update_from_template.sh"

[tool.pylint]
extension-pkg-whitelist = ["numpy"]
jobs = 16                           #detect number of cores

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,broad-exception-caught,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,cyclic-import,duplicate-code,too-many-public-methods"
enable = "no-else-return,consider-using-in"

[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "(_):",
]
